/* src/lib/LexicalTreeView.svelte generated by Svelte v4.2.5 */
import { SvelteComponent, init, safe_not_equal } from "svelte/internal";

import "svelte/internal/disclose-version";

import {
	createLoggedCommandsStore,
	useLexicalCommandsLog
} from '../src/lib/LexicalTreeViewStore';

import { COMMAND_PRIORITY_HIGH } from 'lexical';
import { generateContent } from '../src/lib/LexicalTreeView';
let timeTravelEnabled = false;
let showExportDOM = false;
let playingIndexRef = 0;
let treeElementRef = null;
let inputRef = null;
let isPlaying = false;
let isLimited = false;
let showLimited = false;
let lastEditorStateRef = null;

function instance($$self, $$props, $$invalidate) {
	let { treeTypeButtonClassName } = $$props;
	let { timeTravelButtonClassName } = $$props;
	let { timeTravelPanelSliderClassName } = $$props;
	let { timeTravelPanelButtonClassName } = $$props;
	let { viewClassName } = $$props;
	let { timeTravelPanelClassName } = $$props;
	let { editor } = $$props;

	// const [timeStampedEditorStates, setTimeStampedEditorStates] = useState<
	// 	Array<[number, EditorState]>
	// >([]);
	// const [content, setContent] = useState<string>('');
	// const [timeTravelEnabled, setTimeTravelEnabled] = useState(false);
	// const [showExportDOM, setShowExportDOM] = useState(false);
	// const playingIndexRef = useRef(0);
	// const treeElementRef = useRef<HTMLPreElement | null>(null);
	// const inputRef = useRef<HTMLInputElement | null>(null);
	// const [isPlaying, setIsPlaying] = useState(false);
	// const [isLimited, setIsLimited] = useState(false);
	// const [showLimited, setShowLimited] = useState(false);
	// const lastEditorStateRef = useRef<null | EditorState>(null);
	let timeStampedEditorStates = [];

	let content = '';
	const commandsLog = useLexicalCommandsLog(editor);
	let generateTree;

	$$self.$$set = $$props => {
		if ('treeTypeButtonClassName' in $$props) $$invalidate(0, treeTypeButtonClassName = $$props.treeTypeButtonClassName);
		if ('timeTravelButtonClassName' in $$props) $$invalidate(1, timeTravelButtonClassName = $$props.timeTravelButtonClassName);
		if ('timeTravelPanelSliderClassName' in $$props) $$invalidate(2, timeTravelPanelSliderClassName = $$props.timeTravelPanelSliderClassName);
		if ('timeTravelPanelButtonClassName' in $$props) $$invalidate(3, timeTravelPanelButtonClassName = $$props.timeTravelPanelButtonClassName);
		if ('viewClassName' in $$props) $$invalidate(4, viewClassName = $$props.viewClassName);
		if ('timeTravelPanelClassName' in $$props) $$invalidate(5, timeTravelPanelClassName = $$props.timeTravelPanelClassName);
		if ('editor' in $$props) $$invalidate(6, editor = $$props.editor);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*editor, timeStampedEditorStates*/ 192) {
			$: generateTree = editorState => {
				content = generateContent(editor, commandsLog, showExportDOM);

				if (!timeTravelEnabled) {
					$$invalidate(7, timeStampedEditorStates = [...timeStampedEditorStates, [Date.now(), editorState]]);
				}
			};
		}
	};

	return [
		treeTypeButtonClassName,
		timeTravelButtonClassName,
		timeTravelPanelSliderClassName,
		timeTravelPanelButtonClassName,
		viewClassName,
		timeTravelPanelClassName,
		editor,
		timeStampedEditorStates
	];
}

class LexicalTreeView extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, null, safe_not_equal, {
			treeTypeButtonClassName: 0,
			timeTravelButtonClassName: 1,
			timeTravelPanelSliderClassName: 2,
			timeTravelPanelButtonClassName: 3,
			viewClassName: 4,
			timeTravelPanelClassName: 5,
			editor: 6
		});
	}
}

export default LexicalTreeView;